/* This is the prototype for ASSIGNMENT 1 FOR COMP20007
   Student Number: 828472
   Modules List, Queues and Stack make use of code provided by Matt Farrugia
   */

#include <stdio.h>
#include <stdbool.h>
#include "traverse.h"

#include "list.h"



//==========================PART 1=============================================

void print_dfs(Graph* graph, int source_id) {

	//DECLARATION AND INITIALISATION
	int i;
	List *tmp_stk;
	
	int* vlist = (int)malloc((graph->maxn)*sizeof(vlist));
	
	//creating a temporary stack
	tmp_stk = new_list();
	
	//creating list of visited places, marking them to unvisited as default
	for(i=0;i<(graph->maxn);i++){
		vlist[i]= 0;
	}
	
	//looping through stack while its not empty
	while(!(list_is_empty(tmp_stk))){
		explorer(graph, source_id, vlist, tmp_stk);
		
	}
	
	free_list(tmp_stk);
	
	printf("PRINT OUTPUT LAST\n");
}

//helper function to check if vertice has been visited or not
int
visited(int *vlist, int i){
	//vertex is visited
	if(vlist[i]==1){
		return 1;
	}

	//if vertex has not been visited
	return 0;
}


//recursive vertice exploring function
int
explorer(Graph* graph, int current, int *vlist, List *tmp_stk){
	int stack_top;
	Edge* curr_edge;
	
	//adding the vertex's index into stack and marking it as visited
	list_add_start(tmp_stk, current);
	vlist[current] = 1;
	//index of vertice at top of the stack
	stack_top = tmp_stk->head->data;
	
	//printing the vertex name first
	printf("%s/n", graph->vertices[stack_top]->label);
	//current edge we are looking at from standing vertex
	curr_edge = graph->vertices[current]->first_edge;
	
	//making sure theres always a next edge to look at and not a dead end
	while(curr_edge->next_edge){
		
		//checcking if we have visited vertex we are looking at
		if(visited(vlist,curr_edge->v)){ //abandon the edge at look at the next
			curr_edge = curr_edge->next_edge; 
		}
		//if there is an edge we can traverse, we go!
		else{
			//explore possibilities at the next vertex kinda like life
			explorer(graph,curr_edge->v,vlist,tmp_stk);
		}
	}
	//Pop the stack if there are no where to go to 
	list_remove_start(tmp_stk);
}



//==========================PART 2=============================================

void print_bfs(Graph* graph, int source_id) {
	printf("not yet implemented: put code for part 2 here\n");
}

void detailed_path(Graph* graph, int source_id, int destination_id) {
	printf("not yet implemented: put code for part 3 here\n");
}

void all_paths(Graph* graph, int source_id, int destination_id) {
	printf("not yet implemented: put code for part 4 here\n");
}

void shortest_path(Graph* graph, int source_id, int destination_id) {
	printf("not yet implemented: put code for part 5 here\n");
}
