/* This is the prototype for ASSIGNMENT 1 FOR COMP20007
   Student Number: 828472
   Modules List, Queues and Stack make use of code provided by Matt Farrugia
   */

#include <stdio.h>
#include <stdbool.h>
#include <stdlib.h>

#include "traverse.h"
#include "list.h"

//==========================PART 1=============================================
//implemented with a stack
void
print_dfs(Graph* graph, int source_id){
	
	//DECLARATION AND INITIALISATION
	int i, stack_top;
	List *tmp_stk;
	int* vlist = (int*)malloc((graph->maxn)*sizeof(int));
	Edge* curr_edge;
	
	//creating a temporary stack
	tmp_stk = new_list();
	
	//creating list of visited places, marking them to unvisited as default
	for(i=0;i<(graph->maxn);i++){
		vlist[i]= 0;
	}
	
	//pushing the vertex's index into stack 
	list_add_start(tmp_stk, source_id);
	
	//looking through stack while its not empty
	while(!(list_is_empty(tmp_stk))){
		//pop stack and remember index of the top vertex
		stack_top = list_remove_start(tmp_stk);
		
		//search through all edges if stack if vertex not visited
		if(!vlist[stack_top]){
			printf("%s\n", graph->vertices[stack_top]->label);//print names
			vlist[stack_top] = 1; //mark as visited
			
			//look at first edge of vertice
			curr_edge = graph->vertices[stack_top]->first_edge;
			
			//while multiple edges exist
			while(curr_edge->next_edge){
				//if already visited that vertex, look at next edge
				if(vlist[curr_edge->v]){				
					curr_edge = curr_edge->next_edge;
				}
				else{
					list_add_start(tmp_stk, curr_edge->v); //push stack
					break;
				}
			}
			//if only one edge left
			if(!(curr_edge->next_edge)){ //push only edge's destination
				list_add_start(tmp_stk, curr_edge->v); 	
			}
		}
	}	
	free_list(tmp_stk); //free the stack to prevent memory leaks
}



//==========================PART 2=============================================

void print_bfs(Graph* graph, int source_id){
	
	//DECLARATION AND INITIALISATION
	//qfront is index at queue front, target is vertex that we are looking at
	int i, qfront, target;
	List *tmp_q;
	int* vlist = (int*)malloc((graph->maxn)*sizeof(int));
	Edge* curr_edge;
	
	//creating a temporary queue
	tmp_q = new_list();
	
	//creating list of visited places, marking them to unvisited as default
	for(i=0;i<(graph->maxn);i++){
		vlist[i]= 0;
	}
	
	//enqueueing the vertex's index into queue and mark as visited and print
	list_add_end(tmp_q, source_id);
	vlist[source_id] = 1;
	printf("%s\n", graph->vertices[source_id]->label);
	
	//looking through queue while it is not empty
	while(!(list_is_empty(tmp_q))){
		
		//dequeue and remember the head of queue
		qfront = list_remove_start(tmp_q);
		
		//look at first edge of vertice
		curr_edge = graph->vertices[qfront]->first_edge;
		
		//while there are edges from node at front of queue
		while(curr_edge->next_edge){			
			//if already visited that vertex, look at next edge
			if(vlist[curr_edge->v]){				
				curr_edge = curr_edge->next_edge;
			}
			else{
				target = curr_edge->v; //target would be destination
				vlist[target] = 1; //mark target as visited
				list_add_end(tmp_q, target);//enqueue breath vertices
				printf("%s\n", graph->vertices[target]->label);//print visited
			}
			
		}
		//if only one edge left
		if(!(curr_edge->next_edge)&& !(vlist[curr_edge->v])){ 
			//enqueue only edge's destination
			target = curr_edge->v;
			vlist[target] = 1; //mark target as visited
			list_add_end(tmp_q, target); 	
			printf("%s\n", graph->vertices[target]->label);//print visited
		}
	}
	free_list(tmp_q); //free the queue to prevent memory leaks
}

//==========================PART 3=============================================

void detailed_path(Graph* graph, int source_id, int destination_id) {
		
	//DECLARATION AND INITIALISATION
	int i, stack_top, total_dist=0;
	List *tmp_stk;
	int* vlist = (int*)malloc((graph->maxn)*sizeof(int));
	Edge* curr_edge;
	
	//creating a temporary stack
	tmp_stk = new_list();
	
	//creating list of visited places, marking them to unvisited as default
	for(i=0;i<(graph->maxn);i++){
		vlist[i]= 0;
	}
	
	//pushing the vertex's index into stack 
	list_add_start(tmp_stk, source_id);
	
	//looking through stack while its not empty
	while(!(list_is_empty(tmp_stk))&& !(vlist[destination_id])){
		//pop stack and remember index of the top vertex
		stack_top = list_remove_start(tmp_stk);
		
		//search through all edges if stack if vertex not visited
		if(!vlist[stack_top]){
			
			//print names and distance
			printf("%s (%dkm)\n", graph->vertices[stack_top]->label, total_dist);
			vlist[stack_top] = 1; //mark as visited
			
			//look at first edge of vertice
			curr_edge = graph->vertices[stack_top]->first_edge;
			
			//while multiple edges exist
			while(curr_edge->next_edge){
				//if already visited that vertex, look at next edge
				if(vlist[curr_edge->v]){				
					curr_edge = curr_edge->next_edge;
				}
				else{
					//add the distance onto the cumulative distance
					total_dist = total_dist + (curr_edge->weight);
					list_add_start(tmp_stk, curr_edge->v); //push stack
					break;
				}
			}
			//if only one edge left
			if(!(curr_edge->next_edge)){ //push only edge's destination
				//add the distance onto the cumulative distance
				total_dist = total_dist + (curr_edge->weight);
				list_add_start(tmp_stk, curr_edge->v); 	
			}
		}
	}	
	free_list(tmp_stk); //free the stack to prevent memory leaks
}



//==========================PART 4=============================================

//function to print out current path before moving on to next possibility
void
print_path(Graph* graph, int* current_path, int path_len, int destination_id){
	int i, town_index;
	
	for(i=0;i<(path_len-1);i++){
		town_index = current_path[i];//checking index of vertex
		printf("%s, ", graph->vertices[town_index]->label);//print names
	}
	//print destination and new line to signal end of this path
	printf("%s\n", graph->vertices[destination_id]->label);
}

void all_paths(Graph* graph, int source_id, int destination_id) {
		
	//DECLARATION AND INITIALISATION
	int i, stack_top, path_len=0, stack_add;
	List *tmp_stk;
	int* vlist = (int*)malloc((graph->maxn)*sizeof(int));
	int* current_path = (int*)malloc((graph->maxn)*sizeof(int));
	Edge* curr_edge;
	
	//checking source_id != destination_id
	if(source_id == destination_id){
		printf("%s", graph->vertices[source_id]->label);
		return;
	}
	
	//creating a temporary stack
	tmp_stk = new_list();
	
	//creating list of visited places, marking them to unvisited as default
	for(i=0;i<(graph->maxn);i++){
		vlist[i]= 0;
	}
	
	//pushing the vertex's index into stack 
	list_add_start(tmp_stk, source_id);
	
	//looking through stack while its not empty
	while(!(list_is_empty(tmp_stk))){
		//pop stack and remember index of the top vertex
		stack_top = list_remove_start(tmp_stk);
		
		//not added to stack yet, stack_add is false
		stack_add = 0;
		
		//search through all edges if stack if vertex not visited
		if(!vlist[stack_top]){
			printf("%s\n", graph->vertices[stack_top]->label);//print names
			vlist[stack_top] = 1; //mark as visited
			
			//adding the index to current path
			current_path[path_len] = stack_top;
			path_len++;
			
			if(stack_top == destination_id){
				printf("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
				print_path(graph, current_path, path_len, destination_id);
			}
			
			//look at first edge of vertice
			curr_edge = graph->vertices[stack_top]->first_edge;
			
			//while multiple edges exist
			while(curr_edge->next_edge){
				//if already visited that vertex, look at next edge
				if(vlist[curr_edge->v]){				
					curr_edge = curr_edge->next_edge;
				}
				else{
					stack_add = 1;
					list_add_start(tmp_stk, curr_edge->v); //push stack
					break;
				}
			}
			//if only one edge left
			if(!(curr_edge->next_edge)){ //push only edge's destination
				stack_add = 1;
				list_add_start(tmp_stk, curr_edge->v); 	
			}
		}
		if(stack_add){
			path_len--;
			vlist[stack_top]=0;
		}
	}	
	free_list(tmp_stk); //free the stack to prevent memory leaks
}



//==========================PART 5=============================================

void shortest_path(Graph* graph, int source_id, int destination_id) {
	printf("not yet implemented: put code for part 5 here\n");
}
