/* This is the prototype for ASSIGNMENT 1 FOR COMP20007
   Student Number: 828472
   Modules List, Queues and Stack make use of code provided by Matt Farrugia
   */

#include <stdio.h>
#include <stdbool.h>
#include <stdlib.h>

#include "traverse.h"
#include "list.h"



//==========================PART 1=============================================


//helper function to check if vertice has been visited or not
int
visited(int *vlist, int i){
	//vertex is visited
	if(vlist[i]==1){
		return 1;
	}

	//if vertex has not been visited
	return 0;
}

void
print_dfs(Graph* graph, int source_id){
	
	//DECLARATION AND INITIALISATION
	int i, stack_top;
	List *tmp_stk;
	
	int* vlist = (int*)malloc((graph->maxn)*sizeof(int));
	Edge* curr_edge;
	
	//creating a temporary stack
	tmp_stk = new_list();
	
	//creating list of visited places, marking them to unvisited as default
	for(i=0;i<(graph->maxn);i++){
		vlist[i]= 0;
	}
	
	//pushing the vertex's index into stack 
	list_add_start(tmp_stk, source_id);
	
	//looking through stack while its not empty
	while(!(list_is_empty(tmp_stk))){
		//pop stack and remember index of the top vertex
		stack_top = list_remove_start(tmp_stk);
		
		//search through all edges if stack if vertex not visited
		if(!vlist[stack_top]){
			printf("%s\n", graph->vertices[stack_top]->label);//print names
			vlist[stack_top] = 1; //mark as visited
			
			while(graph->vertices[stack_top]->first_edge){
				printf("a\n");
				curr_edge = graph->vertices[stack_top]->first_edge;
				
				if(!(curr_edge->next_edge)){
					list_add_start(tmp_stk, curr_edge->v); //push only edge's destination
					stack_top = curr_edge->v;
					break;
				}
				else{ //if more than one edge
					list_add_start(tmp_stk, curr_edge->v); //push stack
					curr_edge = curr_edge->next_edge; //look at next edge of vertex
				}	
			}	
		}
	}	
	
	free_list(tmp_stk); //free the stack to prevent memory leaks
}



//==========================PART 2=============================================

void print_bfs(Graph* graph, int source_id) {
	printf("not yet implemented: put code for part 2 here\n");
}

void detailed_path(Graph* graph, int source_id, int destination_id) {
	printf("not yet implemented: put code for part 3 here\n");
}

void all_paths(Graph* graph, int source_id, int destination_id) {
	printf("not yet implemented: put code for part 4 here\n");
}

void shortest_path(Graph* graph, int source_id, int destination_id) {
	printf("not yet implemented: put code for part 5 here\n");
}
