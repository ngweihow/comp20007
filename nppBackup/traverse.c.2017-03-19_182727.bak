/* This is the prototype for ASSIGNMENT 1 FOR COMP20007
   Student Number: 828472
   Modules List, Queues and Stack make use of code provided by Matt Farrugia
   */

#include <stdio.h>
#include "traverse.h"
#include "queue.h"
#include "stack.h"


int maxn = graph->maxn;

//==========================PART 1=============================================

void print_dfs(Graph* graph, int source_id) {

	//DECLARATION AND INITIALISATION
	int vlist[maxn], i;
	Stack *tmp_stk;
	
	
	//creating a temporary stack
	tmp_stk = new_stack();
	
	//creating list of visited places, marking them to unvisited as default
	for(i=0;i<maxn;i++){
		vlist[i]= 0;
	}
	
	//looping through stack while its not empty
	while((stack_is_empty(tmp_stk))== False){
		explorer();
		
	}
	
	free_stack(tmp_stk);
	
	printf("PRINT OUTPUT LAST\n");
}

//helper function to check if vertice has been visited or not
int
visited(int vlist[maxn], int i){
	//vertex is visited
	if(vlist[i]==1){
		return 1;
	}

	//if vertex has not been visited
	return 0;
}


//recursive vertice exploring function
int
explorer(Graph* graph, int current, int vlist[maxn]){
	int stack_top;
	Edge* curr_edge;
	
	//adding the vertex's index into stack and marking it as visited
	stack_add_start(tmp_stk, graph->vertices[current]);
	vlist[current] = 1;
	//index of vertice at top of the stack
	stack_top = tmp_stk->head->data;
	
	//printing the vertex name first
	printf("%s/n", graph->vertices[stack_top]->label);
	//current edge we are looking at from standing vertex
	curr_edge = graph->vertices[current];
	
	//making sure theres always a next edge to look at and not a dead end
	while(curr_edge->next_edge){
		
		//checcking if we have visited vertex we are looking at
		if(visited(vlist[],curr_edge->v)){
			curr_edge = next_edge; //abandon the edge at look at the next
		}
		//if there is an edge we can traverse, we go!
		else{
			//explore possibilities at the next vertex kinda like life
			explorer(graph,v,vlist[]);
		}
	}
	//Pop the stack if there are no where to go to 
	stack_remove_start(tmp_stk);
}



//==========================PART 2=============================================

void print_bfs(Graph* graph, int source_id) {
	printf("not yet implemented: put code for part 2 here\n");
}

void detailed_path(Graph* graph, int source_id, int destination_id) {
	printf("not yet implemented: put code for part 3 here\n");
}

void all_paths(Graph* graph, int source_id, int destination_id) {
	printf("not yet implemented: put code for part 4 here\n");
}

void shortest_path(Graph* graph, int source_id, int destination_id) {
	printf("not yet implemented: put code for part 5 here\n");
}
